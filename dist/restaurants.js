async function storeRestaurantsDb(t){let e=await idb.open("restaurants-db",1,t=>t.createObjectStore("restaurants",{keyPath:"id"})),a=e.transaction("restaurants","readwrite"),r=a.objectStore("restaurants");t.forEach(t=>{r.put(t)}),await a.complete,e.close()}async function storeAllReviews(t,e){let a=await idb.open(`reviews-db-id:${e}`,1,t=>t.createObjectStore(`reviews-id:${e}`,{keyPath:"id"})),r=a.transaction(`reviews-id:${e}`,"readwrite"),n=r.objectStore(`reviews-id:${e}`);t.forEach(t=>{n.put(t)}),await r.complete,a.close()}async function getReviewsByRestaurantId(t){let e=await idb.open(`reviews-db-id:${t}`,1),a=e.transaction(`reviews-id:${t}`,"readonly").objectStore(`reviews-id:${t}`),r=await a.getAll();return e.close(),r}async function getAllRestaurants(){let t=await idb.open("restaurants-db",1),e=t.transaction("restaurants","readonly").objectStore("restaurants"),a=await e.getAll();return t.close(),a}async function storeRestaurantsDb(t){let e=await idb.open("restaurants-db",1,t=>t.createObjectStore("restaurants",{keyPath:"id"})),a=e.transaction("restaurants","readwrite"),r=a.objectStore("restaurants");t.forEach(t=>{r.put(t)}),await a.complete,e.close()}async function postReview(t){await fetch("http://localhost:1337/reviews",{method:"POST",body:JSON.stringify(t),headers:new Headers({"Content-Type":"application/json"})})}async function updateFavoriteStatus(t,e){await fetch(`http://localhost:1337/restaurants/${t}/?is_favorite=${e}`,{method:"PUT"});const a=await idb.open("restaurants-db",1),r=a.transaction("restaurants","readwrite"),n=r.objectStore("restaurants");n.get(t).then(t=>{t.is_favorite=e,n.put(t)}),await r.complete,a.close()}async function fetchReviewsById(t){let e=await fetch(`http://localhost:1337/reviews/?restaurant_id=${t}`);if(200===e.status){const a=await e.json();return await storeAllReviews(a,t),a}throw new Error("Resquest of reviews has failed")}const toggleFavClassAndElement=(t,e)=>{"true"===t|!0===t?(e.classList.add("yesFav"),e.setAttribute("aria-label","remove as favorite")):(e.classList.remove("yesFav"),e.setAttribute("aria-label","remove as favorite"))};class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static async fetchRestaurants(){const t=await fetch(`${DBHelper.DATABASE_URL}`);if(200===t.status){const e=await t.json();return await storeRestaurantsDb(e),e}throw new Error("Request of restaurants has failed")}static async fetchRestaurantById(t){await DBHelper.fetchRestaurants().then(t=>{console.log(t)}).catch(t=>{console.log("Error",t)});const e=(await getAllRestaurants()).find(e=>e.id==t);if(e)return e;throw new Error("Restaurant does not exist")}static async fetchRestaurantByNeighborhood(t){const e=await getAllRestaurants();if(e){return e.filter(e=>e.neighborhood==t)}throw new Error("Neigborhood does not exist")}static async fetchRestaurantByCuisineAndNeighborhood(t,e){await DBHelper.fetchRestaurants().then(t=>{console.log(t)}).catch(t=>{console.log("Error",t)});const a=await getAllRestaurants();if(a){let r=a;return"all"!=t&&(r=r.filter(e=>e.cuisine_type==t)),"all"!=e&&(r=r.filter(t=>t.neighborhood==e)),r}throw new Error("Restaurants with cuisine and neighborhood conbination does not exist")}static async fetchNeighborhoods(){await DBHelper.fetchRestaurants().then(t=>{console.log(t)}).catch(t=>{console.log("Error",t)});const t=await getAllRestaurants();if(t){const e=t.map((e,a)=>t[a].neighborhood);return e.filter((t,a)=>e.indexOf(t)==a)}throw new Error("Failed at fetching all neighborhoods")}static async fetchCuisines(){await DBHelper.fetchRestaurants().then(t=>{console.log(t)}).catch(t=>{console.log("Error",t)});const t=await getAllRestaurants();if(t){const e=t.map((e,a)=>t[a].cuisine_type);return e.filter((t,a)=>e.indexOf(t)==a)}throw new Error("Failed at fetching all cuisine")}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return void 0===t.photograph?"/img/error.jpg":`/img/${t.photograph}.jpg`}static imageUrlForRestaurant_responsive(t){return void 0===t.photograph?"img/responsive_img/error":`img/responsive_img/${t.id}`}static mapMarkerForRestaurant(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:DBHelper.urlForRestaurant(t),map:e,animation:google.maps.Animation.DROP})}static async sendOfflineData(t){localStorage.setItem("data",JSON.stringify(t));const e=document.getElementById("reviews-list"),a=document.createElement("li"),r=document.createElement("p");r.innerHTML=t.name,a.appendChild(r);const n=document.createElement("p");n.innerHTML=(new Date).toDateString(),a.appendChild(n);const s=document.createElement("p");s.innerHTML=`Rating: ${t.rating}`,a.appendChild(s);const o=document.createElement("p");o.innerHTML=t.comments,a.appendChild(o),e.appendChild(a);const i=document.getElementById("offline-alert");i.style.display="block",window.addEventListener("online",t=>{postReview(JSON.parse(localStorage.getItem("data"))),i.style.display="none",localStorage.removeItem("data")})}}
let restaurants,neighborhoods,cuisines;var map,markers=[];navigator.serviceWorker?navigator.serviceWorker.register("./service-worker.js",{scope:"./"}).then(function(e){console.log("ServiceWorker Register")}).catch(function(e){console.log("error"),console.error(e)}):console.log("ServiceWorker not supported."),document.addEventListener("DOMContentLoaded",async e=>{await fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods(neighborhoods).then(e=>{self.neighborhoods=e,fillNeighborhoodsHTML()}).catch(e=>{console.log(e)})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})}),fetchCuisines=(e=>{DBHelper.fetchCuisines(e).then(e=>{self.cuisines=e,fillCuisinesHTML()}).catch(e=>{console.log(e)})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})});const fakeMap=document.getElementById("map-button").addEventListener("click",()=>{const e=document.getElementById("toggle-container"),t=document.getElementById("map-container");e.classList.add("hide-container"),t.classList.add("show-container")});window.initMap=(()=>{self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,s=t.selectedIndex,a=e[n].value,o=t[s].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(a,o).then(e=>{resetRestaurants(e),fillRestaurantsHTML()}).catch(e=>{console.log(e)})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap()}),createRestaurantHTML=(e=>{const t=document.createElement("li"),n=DBHelper.imageUrlForRestaurant_responsive(e),s=document.createElement("figure"),a=document.createElement("picture"),o=document.createElement("source"),r=document.createElement("source"),c=document.createElement("img"),l=document.createElement("figcaption");o.setAttribute("class","lazyload"),o.setAttribute("media","(min-width: 501px)"),o.setAttribute("data-srcset",`${n}_large_2x.jpg 2x, ${n}_large_1x.jpg`),r.setAttribute("class","lazyload"),r.setAttribute("media","(max-width: 500px)"),r.setAttribute("data-srcset",`${n}_small_2x.jpg 2x, ${n}_small_1x.jpg`),c.className="restaurant-img lazyload",c.setAttribute("data-src",`${DBHelper.imageUrlForRestaurant(e)}`),c.setAttribute("alt",e.name),l.textContent=e.name,s.append(a),s.append(l),a.append(o),a.append(r),a.append(c),t.append(s);const i=document.createElement("h1");i.innerHTML=e.name,t.append(i);const d=document.createElement("button");d.innerHTML="&hearts;",d.classList.add("isFavorite"),toggleFavClassAndElement(e.is_favorite,d),d.onclick=(()=>{const t=!JSON.parse(e.is_favorite);console.log(t),updateFavoriteStatus(e.id,t),e.is_favorite=t,toggleFavClassAndElement(e.is_favorite,d)}),t.append(d);const u=document.createElement("p");u.innerHTML=e.neighborhood,t.append(u);const m=document.createElement("p");m.innerHTML=e.address,t.append(m);const p=document.createElement("a");return p.innerHTML="View Details",p.href=DBHelper.urlForRestaurant(e),t.append(p),t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
