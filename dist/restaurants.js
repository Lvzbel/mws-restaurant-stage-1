async function storeRestaurantsDb(t){let e=await idb.open("restaurants-db",1,t=>t.createObjectStore("restaurants",{keyPath:"id"})),a=e.transaction("restaurants","readwrite"),r=a.objectStore("restaurants");t.forEach(t=>{r.put(t)}),await a.complete,e.close()}async function storeAllReviews(t){let e=await idb.open("reviews-db",1,t=>t.createObjectStore("reviews",{keyPath:"id"})),a=e.transaction("reviews","readwrite"),r=a.objectStore("reviews");t.forEach(t=>{r.put(t)}),await a.complete,e.close()}async function getAllRestaurants(){let t=await idb.open("restaurants-db",1),e=t.transaction("restaurants","readonly").objectStore("restaurants"),a=await e.getAll();return t.close(),a}async function storeRestaurantsDb(t){let e=await idb.open("restaurants-db",1,t=>t.createObjectStore("restaurants",{keyPath:"id"})),a=e.transaction("restaurants","readwrite"),r=a.objectStore("restaurants");t.forEach(t=>{r.put(t)}),await a.complete,e.close()}async function getAllReviews(){let t=await idb.open("reviews-db",1),e=t.transaction("reviews","readonly").objectStore("reviews"),a=await e.getAll();return t.close(),a}async function updateFavoriteStatus(t,e){await fetch(`http://localhost:1337/restaurants/${t}/?is_favorite=${e}`,{method:"PUT"});const a=await idb.open("restaurants-db",1),r=a.transaction("restaurants","readwrite"),s=r.objectStore("restaurants");s.get(t).then(t=>{t.is_favorite=e,s.put(t)}),await r.complete,a.close()}class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static get REVIEWDATA_URL(){return"http://localhost:1337/reviews"}static async fetchRestaurants(){const t=await fetch(`${DBHelper.DATABASE_URL}`);if(200===t.status){const e=await t.json();await storeRestaurantsDb(e);const a=await fetch(`${DBHelper.REVIEWDATA_URL}`);if(200!==a.status)throw new Error("Request of reviews has failed");{const t=await a.json();await storeAllReviews(t)}return e}throw new Error("Request of restaurants has failed")}static async fetchRestaurantById(t){await DBHelper.fetchRestaurants().then(t=>{console.log(t)}).catch(t=>{console.log("Error",t)});const e=(await getAllRestaurants()).find(e=>e.id==t);if(e)return e;throw new Error("Restaurant does not exist")}static async fetchRestaurantByNeighborhood(t){const e=await getAllRestaurants();if(e){return e.filter(e=>e.neighborhood==t)}throw new Error("Neigborhood does not exist")}static async fetchRestaurantByCuisineAndNeighborhood(t,e){await DBHelper.fetchRestaurants().then(t=>{console.log(t)}).catch(t=>{console.log("Error",t)});const a=await getAllRestaurants();if(a){let r=a;return"all"!=t&&(r=r.filter(e=>e.cuisine_type==t)),"all"!=e&&(r=r.filter(t=>t.neighborhood==e)),r}throw new Error("Restaurants with cuisine and neighborhood conbination does not exist")}static async fetchNeighborhoods(){await DBHelper.fetchRestaurants().then(t=>{console.log(t)}).catch(t=>{console.log("Error",t)});const t=await getAllRestaurants();if(t){const e=t.map((e,a)=>t[a].neighborhood);return e.filter((t,a)=>e.indexOf(t)==a)}throw new Error("Failed at fetching all neighborhoods")}static async fetchCuisines(){await DBHelper.fetchRestaurants().then(t=>{console.log(t)}).catch(t=>{console.log("Error",t)});const t=await getAllRestaurants();if(t){const e=t.map((e,a)=>t[a].cuisine_type);return e.filter((t,a)=>e.indexOf(t)==a)}throw new Error("Failed at fetching all cuisine")}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return void 0===t.photograph?"/img/error.jpg":`/img/${t.photograph}.jpg`}static imageUrlForRestaurant_responsive(t){return void 0===t.photograph?"img/responsive_img/error":`img/responsive_img/${t.id}`}static mapMarkerForRestaurant(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:DBHelper.urlForRestaurant(t),map:e,animation:google.maps.Animation.DROP})}}
let restaurants,neighborhoods,cuisines;var map,markers=[];navigator.serviceWorker?navigator.serviceWorker.register("./service-worker.js",{scope:"./"}).then(function(e){console.log("ServiceWorker Register")}).catch(function(e){console.log("error"),console.error(e)}):console.log("ServiceWorker not supported."),document.addEventListener("DOMContentLoaded",async e=>{await fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods(neighborhoods).then(e=>{self.neighborhoods=e,fillNeighborhoodsHTML()}).catch(e=>{console.log(e)})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const s=document.createElement("option");s.innerHTML=e,s.value=e,t.append(s)})}),fetchCuisines=(e=>{DBHelper.fetchCuisines(e).then(e=>{self.cuisines=e,fillCuisinesHTML()}).catch(e=>{console.log(e)})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const s=document.createElement("option");s.innerHTML=e,s.value=e,t.append(s)})}),window.initMap=(()=>{self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),s=e.selectedIndex,n=t.selectedIndex,o=e[s].value,r=t[n].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(o,r).then(e=>{resetRestaurants(e),fillRestaurantsHTML()}).catch(e=>{console.log(e)})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap()}),createRestaurantHTML=(e=>{const t=document.createElement("li"),s=DBHelper.imageUrlForRestaurant_responsive(e),n=document.createElement("figure"),o=document.createElement("picture"),r=document.createElement("source"),a=document.createElement("source"),i=document.createElement("img"),c=document.createElement("figcaption");r.setAttribute("media","(min-width: 501px)"),r.setAttribute("srcset",`${s}_large_2x.jpg 2x, ${s}_large_1x.jpg`),a.setAttribute("media","(max-width: 500px)"),a.setAttribute("srcset",`${s}_small_2x.jpg 2x, ${s}_small_1x.jpg`),i.className="restaurant-img",i.src=DBHelper.imageUrlForRestaurant(e),i.setAttribute("alt",e.name),c.textContent=e.name,n.append(o),n.append(c),o.append(r),o.append(a),o.append(i),t.append(n);const l=document.createElement("h1");l.innerHTML=e.name,t.append(l);const d=document.createElement("button");d.innerHTML="&hearts;",d.classList.add("isFavorite"),"true"===e.is_favorite|!0===e.is_favorite?(d.classList.add("yesFav"),console.log(`Status for ${e.id} is true ad type is ${typeof e.is_favorite}`)):"false"===e.is_favorite|!1===e.is_favorite&&(d.classList.remove("yesFav"),console.log(`Status for ${e.id} is false ad type is ${typeof e.is_favorite}`)),d.onclick=(()=>{d.classList.toggle("yesFav");const t=!JSON.parse(e.is_favorite);console.log(t),updateFavoriteStatus(e.id,t),e.is_favorite=t,console.log(e.is_favorite)}),t.append(d);const u=document.createElement("p");u.innerHTML=e.neighborhood,t.append(u);const p=document.createElement("p");p.innerHTML=e.address,t.append(p);const m=document.createElement("a");return m.innerHTML="View Details",m.href=DBHelper.urlForRestaurant(e),t.append(m),t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
