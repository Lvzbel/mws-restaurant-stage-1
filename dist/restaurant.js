let restaurant;var map;async function fillReviewsHTML(e){let t;const n=document.getElementById("reviews-container"),r=document.createElement("h2");r.innerHTML="Reviews",r.setAttribute("id","review-title"),n.appendChild(r),await fetchReviewsById(e);const a=await getReviewsByRestaurantId(e);if(!a)throw new Error("Reviews does not exist");t=a.filter(t=>t.restaurant_id==e);if(!t){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void n.appendChild(e)}const l=document.getElementById("reviews-list");t.forEach(e=>{l.appendChild(createReviewHTML(e))}),n.appendChild(l)}async function addReview(){event.preventDefault();let e=getParameterByName("id");const t={restaurant_id:e,name:document.getElementById("reviewer").value,rating:document.querySelector("#rating-selection option:checked").value,comments:document.getElementById("review-comments").value};await postReview(t);const n=document.getElementById("review-title");n.parentNode.removeChild(n),document.getElementById("reviews-list").innerHTML="",fillReviewsHTML(e)}window.initMap=(()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:t.latlng,scrollwheel:!1}),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map))})}),fetchRestaurantFromURL=(e=>{let t;if(self.restaurant)return void e(null,self.restaurant);const n=getParameterByName("id");n?DBHelper.fetchRestaurantById(n).then(n=>{t=n,self.restaurant=t,fillRestaurantHTML(),e(null,t)}).catch(e=>{console.log(e)}):(error="No restaurant id in URL",e(error,null))}),fillRestaurantHTML=((e=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;const t=document.getElementById("restaurant-img");t.className="restaurant-img",t.setAttribute("alt",e.name),t.src=DBHelper.imageUrlForRestaurant(e),document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),fillReviewsHTML(e.id)}),fillRestaurantHoursHTML=((e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");for(let n in e){const r=document.createElement("tr"),a=document.createElement("td");a.innerHTML=n,r.appendChild(a);const l=document.createElement("td");l.innerHTML=e[n],r.appendChild(l),t.appendChild(r)}}),createReviewHTML=(e=>{const t=document.createElement("li"),n=document.createElement("p");n.innerHTML=e.name,t.appendChild(n);const r=document.createElement("p");r.innerHTML=new Date(e.updatedAt).toDateString(),t.appendChild(r);const a=document.createElement("p");a.innerHTML=`Rating: ${e.rating}`,t.appendChild(a);const l=document.createElement("p");return l.innerHTML=e.comments,t.appendChild(l),t}),fillBreadcrumb=((e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,t.appendChild(n)}),getParameterByName=((e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const n=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
